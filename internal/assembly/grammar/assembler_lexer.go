// Code generated from Assembler.g4 by ANTLR 4.13.2. DO NOT EDIT.

package grammar

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type AssemblerLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var AssemblerLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func assemblerlexerLexerInit() {
	staticData := &AssemblerLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "':'", "','", "'['", "']'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "ENTRY", "SECTION", "DB", "DW", "EQU", "DOT_DATA",
		"DOT_CODE", "MOV", "ADD_I", "SUB_I", "MUL_I", "DIV_I", "ADD_F", "SUB_F",
		"MUL_F", "DIV_F", "CMP_I", "CMP_F", "JMP", "JZ", "JNZ", "JC", "JNC",
		"CALL", "RET", "PUSH", "POP", "IN", "OUT", "AND", "OR", "XOR", "NOT",
		"SHL", "SHR", "HALT", "HEX_LITERAL", "BIN_LITERAL", "DEC_LITERAL", "IDENTIFIER",
		"LINE_COMMENT", "BLOCK_COMMENT", "WS", "EOL",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "ENTRY", "SECTION", "DB", "DW", "EQU",
		"DOT_DATA", "DOT_CODE", "MOV", "ADD_I", "SUB_I", "MUL_I", "DIV_I", "ADD_F",
		"SUB_F", "MUL_F", "DIV_F", "CMP_I", "CMP_F", "JMP", "JZ", "JNZ", "JC",
		"JNC", "CALL", "RET", "PUSH", "POP", "IN", "OUT", "AND", "OR", "XOR",
		"NOT", "SHL", "SHR", "HALT", "HEX_LITERAL", "BIN_LITERAL", "DEC_LITERAL",
		"IDENTIFIER", "LINE_COMMENT", "BLOCK_COMMENT", "WS", "EOL",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 48, 343, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1,
		4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
		5, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1,
		9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 13,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1,
		14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1,
		18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20,
		1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1,
		21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24,
		1, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1,
		27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29,
		1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1,
		32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35,
		1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1,
		38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40,
		1, 40, 1, 40, 4, 40, 281, 8, 40, 11, 40, 12, 40, 282, 1, 41, 1, 41, 1,
		41, 1, 41, 4, 41, 289, 8, 41, 11, 41, 12, 41, 290, 1, 42, 4, 42, 294, 8,
		42, 11, 42, 12, 42, 295, 1, 43, 1, 43, 5, 43, 300, 8, 43, 10, 43, 12, 43,
		303, 9, 43, 1, 44, 1, 44, 1, 44, 3, 44, 308, 8, 44, 1, 44, 5, 44, 311,
		8, 44, 10, 44, 12, 44, 314, 9, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1,
		45, 5, 45, 322, 8, 45, 10, 45, 12, 45, 325, 9, 45, 1, 45, 1, 45, 1, 45,
		1, 45, 1, 45, 1, 46, 4, 46, 333, 8, 46, 11, 46, 12, 46, 334, 1, 46, 1,
		46, 1, 47, 3, 47, 340, 8, 47, 1, 47, 1, 47, 1, 323, 0, 48, 1, 1, 3, 2,
		5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25,
		13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43,
		22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61,
		31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39, 79,
		40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47, 95, 48, 1,
		0, 33, 2, 0, 69, 69, 101, 101, 2, 0, 78, 78, 110, 110, 2, 0, 84, 84, 116,
		116, 2, 0, 82, 82, 114, 114, 2, 0, 89, 89, 121, 121, 2, 0, 83, 83, 115,
		115, 2, 0, 67, 67, 99, 99, 2, 0, 73, 73, 105, 105, 2, 0, 79, 79, 111, 111,
		2, 0, 68, 68, 100, 100, 2, 0, 66, 66, 98, 98, 2, 0, 87, 87, 119, 119, 2,
		0, 81, 81, 113, 113, 2, 0, 85, 85, 117, 117, 1, 0, 46, 46, 2, 0, 65, 65,
		97, 97, 2, 0, 77, 77, 109, 109, 2, 0, 86, 86, 118, 118, 1, 0, 95, 95, 2,
		0, 76, 76, 108, 108, 2, 0, 70, 70, 102, 102, 2, 0, 80, 80, 112, 112, 2,
		0, 74, 74, 106, 106, 2, 0, 90, 90, 122, 122, 2, 0, 72, 72, 104, 104, 2,
		0, 88, 88, 120, 120, 3, 0, 48, 57, 65, 70, 97, 102, 1, 0, 48, 49, 1, 0,
		48, 57, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97,
		122, 2, 0, 10, 10, 13, 13, 2, 0, 9, 9, 32, 32, 351, 0, 1, 1, 0, 0, 0, 0,
		3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0,
		11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0,
		0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0,
		0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0,
		0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1,
		0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49,
		1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0,
		57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0,
		0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0,
		0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0,
		0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1,
		0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 95,
		1, 0, 0, 0, 1, 97, 1, 0, 0, 0, 3, 99, 1, 0, 0, 0, 5, 101, 1, 0, 0, 0, 7,
		103, 1, 0, 0, 0, 9, 105, 1, 0, 0, 0, 11, 111, 1, 0, 0, 0, 13, 119, 1, 0,
		0, 0, 15, 122, 1, 0, 0, 0, 17, 125, 1, 0, 0, 0, 19, 129, 1, 0, 0, 0, 21,
		135, 1, 0, 0, 0, 23, 141, 1, 0, 0, 0, 25, 145, 1, 0, 0, 0, 27, 151, 1,
		0, 0, 0, 29, 157, 1, 0, 0, 0, 31, 163, 1, 0, 0, 0, 33, 169, 1, 0, 0, 0,
		35, 175, 1, 0, 0, 0, 37, 181, 1, 0, 0, 0, 39, 187, 1, 0, 0, 0, 41, 193,
		1, 0, 0, 0, 43, 199, 1, 0, 0, 0, 45, 205, 1, 0, 0, 0, 47, 209, 1, 0, 0,
		0, 49, 212, 1, 0, 0, 0, 51, 216, 1, 0, 0, 0, 53, 219, 1, 0, 0, 0, 55, 223,
		1, 0, 0, 0, 57, 228, 1, 0, 0, 0, 59, 232, 1, 0, 0, 0, 61, 237, 1, 0, 0,
		0, 63, 241, 1, 0, 0, 0, 65, 244, 1, 0, 0, 0, 67, 248, 1, 0, 0, 0, 69, 252,
		1, 0, 0, 0, 71, 255, 1, 0, 0, 0, 73, 259, 1, 0, 0, 0, 75, 263, 1, 0, 0,
		0, 77, 267, 1, 0, 0, 0, 79, 271, 1, 0, 0, 0, 81, 276, 1, 0, 0, 0, 83, 284,
		1, 0, 0, 0, 85, 293, 1, 0, 0, 0, 87, 297, 1, 0, 0, 0, 89, 307, 1, 0, 0,
		0, 91, 317, 1, 0, 0, 0, 93, 332, 1, 0, 0, 0, 95, 339, 1, 0, 0, 0, 97, 98,
		5, 58, 0, 0, 98, 2, 1, 0, 0, 0, 99, 100, 5, 44, 0, 0, 100, 4, 1, 0, 0,
		0, 101, 102, 5, 91, 0, 0, 102, 6, 1, 0, 0, 0, 103, 104, 5, 93, 0, 0, 104,
		8, 1, 0, 0, 0, 105, 106, 7, 0, 0, 0, 106, 107, 7, 1, 0, 0, 107, 108, 7,
		2, 0, 0, 108, 109, 7, 3, 0, 0, 109, 110, 7, 4, 0, 0, 110, 10, 1, 0, 0,
		0, 111, 112, 7, 5, 0, 0, 112, 113, 7, 0, 0, 0, 113, 114, 7, 6, 0, 0, 114,
		115, 7, 2, 0, 0, 115, 116, 7, 7, 0, 0, 116, 117, 7, 8, 0, 0, 117, 118,
		7, 1, 0, 0, 118, 12, 1, 0, 0, 0, 119, 120, 7, 9, 0, 0, 120, 121, 7, 10,
		0, 0, 121, 14, 1, 0, 0, 0, 122, 123, 7, 9, 0, 0, 123, 124, 7, 11, 0, 0,
		124, 16, 1, 0, 0, 0, 125, 126, 7, 0, 0, 0, 126, 127, 7, 12, 0, 0, 127,
		128, 7, 13, 0, 0, 128, 18, 1, 0, 0, 0, 129, 130, 7, 14, 0, 0, 130, 131,
		7, 9, 0, 0, 131, 132, 7, 15, 0, 0, 132, 133, 7, 2, 0, 0, 133, 134, 7, 15,
		0, 0, 134, 20, 1, 0, 0, 0, 135, 136, 7, 14, 0, 0, 136, 137, 7, 6, 0, 0,
		137, 138, 7, 8, 0, 0, 138, 139, 7, 9, 0, 0, 139, 140, 7, 0, 0, 0, 140,
		22, 1, 0, 0, 0, 141, 142, 7, 16, 0, 0, 142, 143, 7, 8, 0, 0, 143, 144,
		7, 17, 0, 0, 144, 24, 1, 0, 0, 0, 145, 146, 7, 15, 0, 0, 146, 147, 7, 9,
		0, 0, 147, 148, 7, 9, 0, 0, 148, 149, 7, 18, 0, 0, 149, 150, 7, 7, 0, 0,
		150, 26, 1, 0, 0, 0, 151, 152, 7, 5, 0, 0, 152, 153, 7, 13, 0, 0, 153,
		154, 7, 10, 0, 0, 154, 155, 7, 18, 0, 0, 155, 156, 7, 7, 0, 0, 156, 28,
		1, 0, 0, 0, 157, 158, 7, 16, 0, 0, 158, 159, 7, 13, 0, 0, 159, 160, 7,
		19, 0, 0, 160, 161, 7, 18, 0, 0, 161, 162, 7, 7, 0, 0, 162, 30, 1, 0, 0,
		0, 163, 164, 7, 9, 0, 0, 164, 165, 7, 7, 0, 0, 165, 166, 7, 17, 0, 0, 166,
		167, 7, 18, 0, 0, 167, 168, 7, 7, 0, 0, 168, 32, 1, 0, 0, 0, 169, 170,
		7, 15, 0, 0, 170, 171, 7, 9, 0, 0, 171, 172, 7, 9, 0, 0, 172, 173, 7, 18,
		0, 0, 173, 174, 7, 20, 0, 0, 174, 34, 1, 0, 0, 0, 175, 176, 7, 5, 0, 0,
		176, 177, 7, 13, 0, 0, 177, 178, 7, 10, 0, 0, 178, 179, 7, 18, 0, 0, 179,
		180, 7, 20, 0, 0, 180, 36, 1, 0, 0, 0, 181, 182, 7, 16, 0, 0, 182, 183,
		7, 13, 0, 0, 183, 184, 7, 19, 0, 0, 184, 185, 7, 18, 0, 0, 185, 186, 7,
		20, 0, 0, 186, 38, 1, 0, 0, 0, 187, 188, 7, 9, 0, 0, 188, 189, 7, 7, 0,
		0, 189, 190, 7, 17, 0, 0, 190, 191, 7, 18, 0, 0, 191, 192, 7, 20, 0, 0,
		192, 40, 1, 0, 0, 0, 193, 194, 7, 6, 0, 0, 194, 195, 7, 16, 0, 0, 195,
		196, 7, 21, 0, 0, 196, 197, 7, 18, 0, 0, 197, 198, 7, 7, 0, 0, 198, 42,
		1, 0, 0, 0, 199, 200, 7, 6, 0, 0, 200, 201, 7, 16, 0, 0, 201, 202, 7, 21,
		0, 0, 202, 203, 7, 18, 0, 0, 203, 204, 7, 20, 0, 0, 204, 44, 1, 0, 0, 0,
		205, 206, 7, 22, 0, 0, 206, 207, 7, 16, 0, 0, 207, 208, 7, 21, 0, 0, 208,
		46, 1, 0, 0, 0, 209, 210, 7, 22, 0, 0, 210, 211, 7, 23, 0, 0, 211, 48,
		1, 0, 0, 0, 212, 213, 7, 22, 0, 0, 213, 214, 7, 1, 0, 0, 214, 215, 7, 23,
		0, 0, 215, 50, 1, 0, 0, 0, 216, 217, 7, 22, 0, 0, 217, 218, 7, 6, 0, 0,
		218, 52, 1, 0, 0, 0, 219, 220, 7, 22, 0, 0, 220, 221, 7, 1, 0, 0, 221,
		222, 7, 6, 0, 0, 222, 54, 1, 0, 0, 0, 223, 224, 7, 6, 0, 0, 224, 225, 7,
		15, 0, 0, 225, 226, 7, 19, 0, 0, 226, 227, 7, 19, 0, 0, 227, 56, 1, 0,
		0, 0, 228, 229, 7, 3, 0, 0, 229, 230, 7, 0, 0, 0, 230, 231, 7, 2, 0, 0,
		231, 58, 1, 0, 0, 0, 232, 233, 7, 21, 0, 0, 233, 234, 7, 13, 0, 0, 234,
		235, 7, 5, 0, 0, 235, 236, 7, 24, 0, 0, 236, 60, 1, 0, 0, 0, 237, 238,
		7, 21, 0, 0, 238, 239, 7, 8, 0, 0, 239, 240, 7, 21, 0, 0, 240, 62, 1, 0,
		0, 0, 241, 242, 7, 7, 0, 0, 242, 243, 7, 1, 0, 0, 243, 64, 1, 0, 0, 0,
		244, 245, 7, 8, 0, 0, 245, 246, 7, 13, 0, 0, 246, 247, 7, 2, 0, 0, 247,
		66, 1, 0, 0, 0, 248, 249, 7, 15, 0, 0, 249, 250, 7, 1, 0, 0, 250, 251,
		7, 9, 0, 0, 251, 68, 1, 0, 0, 0, 252, 253, 7, 8, 0, 0, 253, 254, 7, 3,
		0, 0, 254, 70, 1, 0, 0, 0, 255, 256, 7, 25, 0, 0, 256, 257, 7, 8, 0, 0,
		257, 258, 7, 3, 0, 0, 258, 72, 1, 0, 0, 0, 259, 260, 7, 1, 0, 0, 260, 261,
		7, 8, 0, 0, 261, 262, 7, 2, 0, 0, 262, 74, 1, 0, 0, 0, 263, 264, 7, 5,
		0, 0, 264, 265, 7, 24, 0, 0, 265, 266, 7, 19, 0, 0, 266, 76, 1, 0, 0, 0,
		267, 268, 7, 5, 0, 0, 268, 269, 7, 24, 0, 0, 269, 270, 7, 3, 0, 0, 270,
		78, 1, 0, 0, 0, 271, 272, 7, 24, 0, 0, 272, 273, 7, 15, 0, 0, 273, 274,
		7, 19, 0, 0, 274, 275, 7, 2, 0, 0, 275, 80, 1, 0, 0, 0, 276, 277, 5, 48,
		0, 0, 277, 278, 5, 120, 0, 0, 278, 280, 1, 0, 0, 0, 279, 281, 7, 26, 0,
		0, 280, 279, 1, 0, 0, 0, 281, 282, 1, 0, 0, 0, 282, 280, 1, 0, 0, 0, 282,
		283, 1, 0, 0, 0, 283, 82, 1, 0, 0, 0, 284, 285, 5, 48, 0, 0, 285, 286,
		5, 98, 0, 0, 286, 288, 1, 0, 0, 0, 287, 289, 7, 27, 0, 0, 288, 287, 1,
		0, 0, 0, 289, 290, 1, 0, 0, 0, 290, 288, 1, 0, 0, 0, 290, 291, 1, 0, 0,
		0, 291, 84, 1, 0, 0, 0, 292, 294, 7, 28, 0, 0, 293, 292, 1, 0, 0, 0, 294,
		295, 1, 0, 0, 0, 295, 293, 1, 0, 0, 0, 295, 296, 1, 0, 0, 0, 296, 86, 1,
		0, 0, 0, 297, 301, 7, 29, 0, 0, 298, 300, 7, 30, 0, 0, 299, 298, 1, 0,
		0, 0, 300, 303, 1, 0, 0, 0, 301, 299, 1, 0, 0, 0, 301, 302, 1, 0, 0, 0,
		302, 88, 1, 0, 0, 0, 303, 301, 1, 0, 0, 0, 304, 308, 5, 59, 0, 0, 305,
		306, 5, 47, 0, 0, 306, 308, 5, 47, 0, 0, 307, 304, 1, 0, 0, 0, 307, 305,
		1, 0, 0, 0, 308, 312, 1, 0, 0, 0, 309, 311, 8, 31, 0, 0, 310, 309, 1, 0,
		0, 0, 311, 314, 1, 0, 0, 0, 312, 310, 1, 0, 0, 0, 312, 313, 1, 0, 0, 0,
		313, 315, 1, 0, 0, 0, 314, 312, 1, 0, 0, 0, 315, 316, 6, 44, 0, 0, 316,
		90, 1, 0, 0, 0, 317, 318, 5, 47, 0, 0, 318, 319, 5, 42, 0, 0, 319, 323,
		1, 0, 0, 0, 320, 322, 9, 0, 0, 0, 321, 320, 1, 0, 0, 0, 322, 325, 1, 0,
		0, 0, 323, 324, 1, 0, 0, 0, 323, 321, 1, 0, 0, 0, 324, 326, 1, 0, 0, 0,
		325, 323, 1, 0, 0, 0, 326, 327, 5, 42, 0, 0, 327, 328, 5, 47, 0, 0, 328,
		329, 1, 0, 0, 0, 329, 330, 6, 45, 0, 0, 330, 92, 1, 0, 0, 0, 331, 333,
		7, 32, 0, 0, 332, 331, 1, 0, 0, 0, 333, 334, 1, 0, 0, 0, 334, 332, 1, 0,
		0, 0, 334, 335, 1, 0, 0, 0, 335, 336, 1, 0, 0, 0, 336, 337, 6, 46, 0, 0,
		337, 94, 1, 0, 0, 0, 338, 340, 5, 13, 0, 0, 339, 338, 1, 0, 0, 0, 339,
		340, 1, 0, 0, 0, 340, 341, 1, 0, 0, 0, 341, 342, 5, 10, 0, 0, 342, 96,
		1, 0, 0, 0, 10, 0, 282, 290, 295, 301, 307, 312, 323, 334, 339, 1, 6, 0,
		0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// AssemblerLexerInit initializes any static state used to implement AssemblerLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewAssemblerLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func AssemblerLexerInit() {
	staticData := &AssemblerLexerLexerStaticData
	staticData.once.Do(assemblerlexerLexerInit)
}

// NewAssemblerLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewAssemblerLexer(input antlr.CharStream) *AssemblerLexer {
	AssemblerLexerInit()
	l := new(AssemblerLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &AssemblerLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "Assembler.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// AssemblerLexer tokens.
const (
	AssemblerLexerT__0          = 1
	AssemblerLexerT__1          = 2
	AssemblerLexerT__2          = 3
	AssemblerLexerT__3          = 4
	AssemblerLexerENTRY         = 5
	AssemblerLexerSECTION       = 6
	AssemblerLexerDB            = 7
	AssemblerLexerDW            = 8
	AssemblerLexerEQU           = 9
	AssemblerLexerDOT_DATA      = 10
	AssemblerLexerDOT_CODE      = 11
	AssemblerLexerMOV           = 12
	AssemblerLexerADD_I         = 13
	AssemblerLexerSUB_I         = 14
	AssemblerLexerMUL_I         = 15
	AssemblerLexerDIV_I         = 16
	AssemblerLexerADD_F         = 17
	AssemblerLexerSUB_F         = 18
	AssemblerLexerMUL_F         = 19
	AssemblerLexerDIV_F         = 20
	AssemblerLexerCMP_I         = 21
	AssemblerLexerCMP_F         = 22
	AssemblerLexerJMP           = 23
	AssemblerLexerJZ            = 24
	AssemblerLexerJNZ           = 25
	AssemblerLexerJC            = 26
	AssemblerLexerJNC           = 27
	AssemblerLexerCALL          = 28
	AssemblerLexerRET           = 29
	AssemblerLexerPUSH          = 30
	AssemblerLexerPOP           = 31
	AssemblerLexerIN            = 32
	AssemblerLexerOUT           = 33
	AssemblerLexerAND           = 34
	AssemblerLexerOR            = 35
	AssemblerLexerXOR           = 36
	AssemblerLexerNOT           = 37
	AssemblerLexerSHL           = 38
	AssemblerLexerSHR           = 39
	AssemblerLexerHALT          = 40
	AssemblerLexerHEX_LITERAL   = 41
	AssemblerLexerBIN_LITERAL   = 42
	AssemblerLexerDEC_LITERAL   = 43
	AssemblerLexerIDENTIFIER    = 44
	AssemblerLexerLINE_COMMENT  = 45
	AssemblerLexerBLOCK_COMMENT = 46
	AssemblerLexerWS            = 47
	AssemblerLexerEOL           = 48
)
